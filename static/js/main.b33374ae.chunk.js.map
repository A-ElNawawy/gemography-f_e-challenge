{"version":3,"sources":["components/CardSidePic.js","components/Container.js","components/Message.js","includes/functions.js","containers/App.js","index.js"],"names":["CardSidePic","styled","div","Badge","span","_CardSidePic","img","alt","repoName","description","starsNo","issuesNo","ownerName","timeInterval","className","src","Container","Message","h2","getDays","date","today","Date","diffTime","Math","abs","ceil","getDateOf","noOfDaysBack","setDate","getDate","month","getMonth","day","getFullYear","GetFormattedDate","getData","me","pageNo","per_page","a","setState","loading","api","fetch","then","response","json","data","items","state","length","full_name","concat","message","loadMore","listenToScrolling","windowInnerHeight","window","innerHeight","bodyHeight","document","body","clientHeight","documentElement","scrollTop","lock","setTimeout","dampEvent","App","props","coding","this","addEventListener","list","repo","push","owner","avatar_url","name","stargazers_count","open_issues_count","login","created_at","id","includes","React","Component","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.b33374ae.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nconst CardSidePic = styled.div`\r\n  display: flex;\r\n  min-width: 400px;\r\n  margin-top: 20px;\r\n  margin-bottom: 20px;\r\n  padding: 10px;\r\n  border: 1px solid #e1e1e1;\r\n  border-radius: 5px;\r\n  box-shadow: 0 2px 0 0 #c9c9c9;\r\n  .img{\r\n    height: 113px;\r\n    width: 116px;\r\n    position: relative;\r\n    img{\r\n      height: 100%;\r\n      width: 100%;\r\n      border-radius: 5px;\r\n    }\r\n    :after{\r\n      content: \"\";\r\n      border-radius: 5px;\r\n      transition: all .3s ease-in-out;\r\n      position: absolute;\r\n      top: 0;\r\n      left: 0;\r\n      background-color: #000;\r\n      opacity: 0;\r\n      width: 100%;\r\n      height: 100%;\r\n    }\r\n    :hover{\r\n      :after{\r\n        opacity: .2;\r\n      }\r\n    }\r\n  }\r\n  .content{\r\n    flex-basis: 100%;\r\n    padding: 0 0 0 20px;\r\n    h5{\r\n      margin-bottom: 10px;\r\n      text-transform: capitalize;\r\n      font-style: italic;\r\n      font-size: 22px;\r\n    }\r\n    .description{\r\n      margin-bottom: 10px\r\n    }\r\n    .repo-info{\r\n      display:flex;\r\n      align-items: center;\r\n      @media (max-width: 700px){\r\n        &{\r\n          flex-wrap: wrap;\r\n          p{\r\n            width: 100%;\r\n            margin-top: 15px;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst Badge = styled.span`\r\n  margin-right: 5px;\r\n  padding: 5px 10px;\r\n  border: 1px solid #e1e1e1;\r\n  border-radius: 5px;\r\n`;\r\n\r\nfunction _CardSidePic({\r\n  //props\r\n  img,\r\n  alt,\r\n  repoName,\r\n  description,\r\n  starsNo,\r\n  issuesNo,\r\n  ownerName,\r\n  timeInterval\r\n}) {\r\n  return(\r\n    <CardSidePic className=\"CardSidePic\">\r\n      <div className=\"img\">\r\n        <img src={img} alt={alt}></img>\r\n      </div>\r\n      <div className=\"content\">\r\n        <h5>{repoName}</h5>\r\n        <p className=\"description\">{description}</p>\r\n        <div className=\"repo-info\">\r\n          <Badge>Stars: {starsNo}</Badge>\r\n          <Badge>Issues: {issuesNo}</Badge>\r\n          <p>Submitted {timeInterval} days ago by {ownerName}</p>\r\n        </div>\r\n      </div>\r\n    </CardSidePic>\r\n  )\r\n}\r\n\r\nexport default _CardSidePic;","import styled from 'styled-components';\r\n\r\nconst Container = styled.div`\r\n  margin: 20px auto;\r\n  padding: 0 15px;\r\n  text-align:center;\r\n  @media (min-width: 768px) and (max-width: 991px){\r\n    &{\r\n      width: 760px;\r\n    }\r\n  }\r\n  @media (min-width: 992px) and (max-width: 1199px){\r\n    &{\r\n      width: 980px;\r\n    }\r\n  }\r\n  @media (min-width: 1200px){\r\n    &{\r\n      width: 1170px;\r\n    }\r\n  }\r\n`;\r\nexport default Container;","import styled from 'styled-components';\r\n\r\nconst Message = styled.h2`\r\n  background-color: #000000a1;\r\n  color: #fff;\r\n  border: 2px solid #000;\r\n  border-radius: 5px;\r\n  text-transform: capitalize;\r\n  text-align: center;\r\n  font-size: 30px;\r\n  width: 95%;\r\n  padding: 30px 0;\r\n  margin: 0 20px;\r\n  position: fixed;\r\n  bottom: 50vh;\r\n  left: 0;\r\n`;\r\nexport default Message;","/*\r\n** getDays Function to Calculate Difference ( in days ) Between Today And a Given Date [ Accepts Parameters]\r\n** Parameters:\r\n** date = Date Which We Want to Calculate\r\n*/\r\nfunction getDays(date){\r\n  let today = new Date();\r\n  date = new Date(date);\r\n  const diffTime = Math.abs(today - date);\r\n  const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\r\n  return diffDays;\r\n}\r\n\r\n/*\r\n** getDateOf Function to Get The Date of a certain Day [ Accepts Parameters]\r\n** Parameters:\r\n** noOfDaysBack = Number of How many Days We Want to Go Back\r\n*/\r\nfunction getDateOf(noOfDaysBack){\r\n  let date = new Date();\r\n  date.setDate(date.getDate()-noOfDaysBack);\r\n  date = GetFormattedDate(date);\r\n  return(date);\r\n}\r\n\r\n/*\r\n** GetFormattedDate Function to Format a Given Date in This Format (yyyy-mm-dd) [ Accepts Parameters]\r\n** Parameters:\r\n** date = Date to Be Formatted\r\n*/\r\nfunction GetFormattedDate(date) {\r\n  var month = date.getMonth() + 1;\r\n  var day = date.getDate();\r\n  if(day < 10){day = \"0\" + day;}\r\n  var year = date.getFullYear();\r\n  return year + \"-\" + month + \"-\" + day;\r\n}\r\n\r\n/*\r\n** getData Function to Fetch Data From github [ Accepts Parameters]\r\n** Parameters:\r\n** me = The ( This ) Keyword\r\n** date = Repos Will Be Searched in The Period Between It (date) And Today\r\n** pageNo = Page Number ( to Paginate Between Pages Came From github )\r\n** per_page = How Much Repos We Want Per Page (Max: 100)\r\n*/\r\nasync function getData(me, date, pageNo, per_page) {\r\n  me.setState({loading: true});\r\n  let api = 'https://api.github.com/search/repositories?q=created:>'\r\n  +date\r\n  +'&page='+pageNo\r\n  +'&per_page='+per_page\r\n  +'&sort=stars&order=desc';\r\n  await fetch(api)\r\n  .then(response => response.json())\r\n  .then(data => {\r\n    //Check if response has items & add them to items array\r\n    if(data.items){\r\n      if(me.state.items.length === 0){\r\n        me.setState(\r\n          (state) =>({\r\n            items: state.items.concat(data.items)\r\n          })\r\n        );\r\n      }else{\r\n        //To Prevent duplication of data\r\n        if(me.state.items[0].full_name !== data.items[0].full_name){\r\n          me.setState(\r\n            (state) =>({\r\n              items: state.items.concat(data.items)\r\n            })\r\n          );\r\n        }\r\n      }\r\n    // if we have error\r\n    }else if(data.message) {\r\n      me.setState({message: data.message});\r\n    }\r\n    me.setState({loading: false});\r\n  });\r\n}\r\n\r\n/*\r\n** loadMore Function to increment the pageNo App state and Fetch Data From github [ Accepts Parameters]\r\n** Parameters:\r\n** me = The ( This ) Keyword\r\n*/\r\nfunction loadMore(me) {\r\n  me.setState((state) => ({\r\n    pageNo: state.pageNo + 1\r\n  }));\r\n  getData(\r\n    me,\r\n    me.state.date,\r\n    me.state.pageNo,\r\n    me.state.per_page\r\n  );\r\n}\r\n\r\n/*\r\n** listenToScrolling Function is monitoring if user reach the end of repos list, if so, it calls loadMore Function but throw dampEvent Function [ Accepts Parameters]\r\n** Parameters:\r\n** me = The ( This ) Keyword\r\n*/\r\nfunction listenToScrolling(me) {\r\n  let windowInnerHeight = window.innerHeight; // user screen hight\r\n  let bodyHeight = document.body.clientHeight; // the overall body hight ( increases with more repos loading )\r\n  let scrolled = document.documentElement.scrollTop; // how much user scrolled the document\r\n  if (scrolled > bodyHeight - windowInnerHeight) { // that means that user reached the end of page\r\n    if(me.state.message == \"\") { // if we have a message, that means we have error, so don't fetch data till user refresh the page\r\n      dampEvent(me);\r\n    }\r\n  }\r\n}\r\n\r\n/*\r\n** dampEvent Function:\r\n** if we call loadMore function directly from listenToScrolling function, we will get a massive amount of fetches which will make  an error in server\r\n** so, just we get the event for one time, we want to lock the listener till the fetch ends\r\n** and this is the dampEvent function\r\n** [ Accepts Parameters]\r\n** Parameters:\r\n** me = The ( This ) Keyword\r\n*/\r\nfunction dampEvent(me) {\r\n  if(!me.lock /* lock must be declared out of this function, and can't be a state */){\r\n    me.lock = true; // scrolling will not affect loadMore for one second\r\n    setTimeout(function () {\r\n      //===================================\r\n      loadMore(me);\r\n      //===================================\r\n      me.lock = false; // we can receive another event now\r\n    }, 1000)\r\n  }\r\n}\r\n\r\nexport {\r\n  getDays,\r\n  getData,\r\n  getDateOf,\r\n  loadMore,\r\n  listenToScrolling,\r\n  dampEvent\r\n}","import React from 'react';\nimport CardSidePic from '../components/CardSidePic';\nimport Container from '../components/Container';\nimport Message from '../components/Message';\nimport {\n  getDays,\n  getData,\n  getDateOf,\n  loadMore,\n  listenToScrolling\n  } from \"../includes/functions\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      coding: false, // just for testing [set it to prevent fetching data]\n      loading: false,\n      items: [], // array of all repos we get from server\n      message: \"\", // error message we get from server\n      date: getDateOf(30), // number of days we want to go back to get repos\n      pageNo: 1, // page number we will send to github\n      per_page: 100 // number of repos we want per page\n    };\n  }\n\n  componentDidMount() {\n    if(!this.state.coding){ // just for testing\n      getData(\n        this,\n        this.state.date,\n        this.pageNo,\n        this.state.per_page\n      );\n      loadMore(this);\n    }\n  }\n\n  lock = false; // this variable to be used in dampEvent function to prevent multi requests\n  render(){\n    let me = this;\n    if(!this.state.loading){ // if we are loading data from server, don't listen to scrolling\n      window.addEventListener(\"scroll\", () => {listenToScrolling(me)});\n    }\n\n    /* Creating a list of cards, each card represents a repo*/\n    let list = []; // array that will contain all CardSidePic components\n    let items = this.state.items;\n    let message = this.state.message;\n    if (items){\n      for(let repo of items){\n        list.push(\n          <CardSidePic\n            key={repo.id}\n            img={repo.owner.avatar_url}\n            alt=\"Avatar\"\n            repoName={repo.name}\n            description={repo.description}\n            starsNo={repo.stargazers_count}\n            issuesNo={repo.open_issues_count}\n            ownerName={repo.owner.login}\n            timeInterval={getDays(repo.created_at)}\n          ></CardSidePic>\n        );\n      }\n    }\n    return (\n      <div className=\"App\">\n        <main>\n          <Container>\n            <h1>Front-end Coding Challenge</h1>\n            <h2>Idea of the App</h2>\n            <p>\n              The task is to implement a small web app that will list the most starred Github repos that were created in the last 30 days.\n              We'll get data directly from the Github API.\n            </p>\n            <p>\n              In this app we used Reactjs, API, styled-components, create-react-app and gh-pages.\n            </p>\n          </Container>\n        </main>\n        <Container>\n          {list}\n          {\n            message.includes(\"API rate limit exceeded for\") ?\n              <Message>You Exceeded The API Rate Limit, Please Wait A While Then Refresh Your Page</Message>\n            :\n              null\n          }\n          {\n            this.state.loading?\n              <Message>loading...</Message>\n            :\n              null\n          }\n        </Container>\n      </div>\n    )\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}